package Lecture17;

public class MazePath {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n=2;
			int[][] strg=new int[n+1][n+1];
			String str="abbg";
			String str2="agbg";
			//System.out.println(countMazePathIR(n, n, 0, 0, strg));
			System.out.println(lcs(str, str2));
			
	}
//	public static int countMazePath(int er, int ec, int cc, int cr,int[][]strg) {
//		if (cr == er || ec == cc) {
//			return 1;
//		}
//		if (cc == ec && cr == er) {
//			return 0;
//		}
//		int counter = 0;
//		int rec = countMazePath(er, ec, cc + 1, cr);
//		int rec1 = countMazePath(er, ec, cc, cr + 1);
//		int myans=rec+rec1;
//		strg[cc][cr]=myans;
//		return myans;
//	}
	public static int countMazePathIR(int er,int ec,int cc,int cr,int[][] strg) {
		strg[er][ec]=1;
		
		for(int i=er;i>=0;i--) {
			for(int j=ec;i>=0;j--) {
				if(i==er) {
					strg[i][j]=1;
				
				}
				else if(j==ec) {
					strg[i][j]=1;
				
				}
				else
					
				strg[i][j]=strg[i+1][j]+strg[i][j+1];
			}
		}
		return strg[cc][cr];
	}
	public static int lcs(String s1,String s2) {
		if(s1.length()==0||s2.length()==0) {
			return 0;
		}
		String ros1=s1.substring(1);
		String ros2=s2.substring(1);
		int ans=0;
		if(s1.charAt(0)==s2.charAt(0)) {
			ans=1+lcs(ros1,ros2);
		}else {
			int f1=lcs(s1,ros2);
			int f2=lcs(s2,ros1);
			ans=Math.max(f1, f2);
		}
		return ans;
	}
}
